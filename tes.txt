\chapter{پیاده سازی}

\section{توضیح کد}
کلاس \lr{Board}

کلاس \lr{Board} وضعیت بازی را ذخیره می‌کند. این کلاس دارای دو متد اصلی است:

\lr{find(x, y)}: موقعیت یک \lr{Agent} را در صفحه برمی‌گرداند.
\lr{move(agent, direction): Agent} را به سمت یک جهت خاص حرکت می‌دهد.
متد \lr{find()} موقعیت یک \lr{Agent} را در صفحه برمی‌گرداند. این متد به پارامترهای x و y موقعیت \lr{Agent} را در صفحه می‌دهد و موقعیت \lr{Agent} را در صورت یافتن آن برمی‌گرداند. در غیر این صورت، None را برمی‌گرداند.

متد \lr{move()} \lr{Agent} را به سمت یک جهت خاص حرکت می‌دهد. این متد به پارامترهای \lr{agent} و \lr{direction} جهت حرکت \lr{Agent} را می‌دهد.

کلاس \lr{Agent}

کلاس \lr{Agent} یک موجود در بازی را نشان می‌دهد. این کلاس دارای دو متد اصلی است:

\lr{up()}: \lr{Agent} را به سمت بالا حرکت می‌دهد.
\lr{down()}: \lr{Agent} را به سمت پایین حرکت می‌دهد.
متد \lr{up()} \lr{Agent} را به سمت بالا حرکت می‌دهد.

متد \lr{down()} \lr{Agent} را به سمت پایین حرکت می‌دهد.

کلاس \lr{Consts}

کلاس \lr{Consts} متغیرهای ثابتی را برای بازی تعریف می‌کند. این متغیرها شامل نمادهای \lr{Agent}s، دیوارها و نقاط هستند.

تابع \lr{evaluate}

تابع \lr{evaluate} ارزش یک وضعیت بازی را برمی‌گرداند. این تابع ارزش \lr{Agent} \lr{Pacman} را با توجه به فاصله آن تا نقاط محاسبه می‌کند.

تابع \lr{evaluate} به صورت زیر تعریف می‌شود:

تابع \lr{manhattan()} فاصله بین دو \lr{Agent} را بر اساس فاصله اقلیدسی محاسبه می‌کند.

تابع \lr{minimax}

تابع \lr{minimax} یک استراتژی بازی برای \lr{Agent} \lr{Pacman} را پیاده‌سازی می‌کند. این تابع با بررسی تمام حرکات ممکن برای \lr{Agent} \lr{Pacman}، بهترین حرکت را برمی‌گرداند.

تابع \lr{minimax} با استفاده از الگوریتم برش alpha-beta، تعداد محاسبات لازم را کاهش می‌دهد. این الگوریتم با استفاده از دو پارامتر آلفا و بتا، جستجوی درخت را هرس می‌کند.

تابع \lr{A search*}

تابع \lr{A* search} یک الگوریتم جستجو برای یافتن کوتاه‌ترین مسیر به هدف است. این تابع با بررسی تمام حرکات ممکن برای \lr{Agent} \lr{Pacman}، کوتاه‌ترین مسیر را برمی‌گرداند.

تابع \lr{A* search} به صورت زیر تعریف می‌شود:

تابع \lr{A* search} با استفاده از یک لیست مرزی (frontier) و یک مجموعه بررسی‌شده (explored)، وضعیت بازی را بررسی می‌کند. لیست مرزی شامل وضعیت‌های بازی است که هنوز بررسی نشده‌اند، و مجموعه بررسی‌شده شامل وضعیت‌هایی است که قبلاً بررسی شده‌اند.

در هر مرحله از تابع، وضعیت بازی فعلی (\lr{current_board}) از لیست مرزی خارج می‌شود و به مجموعه بررسی‌شده اضافه می‌شود. اگر وضعیت بازی فعلی وضعیت هدف \lr{(goal_state)} باشد، تابع مسیر بازسازی‌شده \lr{(reconstruct_path)} را برمی‌گرداند.

در غیر این صورت، برای هر حرکت ممکن \lr{(move)}، وضعیت بازی جدید (\lr{new_board}) ایجاد می‌شود و به لیست مرزی اضافه می‌شود. اگر وضعیت بازی جدید قبلاً بررسی نشده باشد، مقدار ابتکاری \lr{(heuristic)} آن محاسبه می‌شود و بر اساس مقدار ابتکاری مرتب می‌شود.

تابع \lr{A* search} با استفاده از مقدار ابتکاری، وضعیت‌های بازی را اولویت‌بندی می‌کند. مقدار ابتکاری یک تخمین از فاصله بین وضعیت بازی فعلی و وضعیت هدف است. با استفاده از مقدار ابتکاری، تابع \lr{A* search} می‌تواند به طور موثر وضعیت‌های بازی را بررسی کند و کوتاه‌ترین مسیر را به هدف پیدا کند.

کلاس \lr{Game}

کلاس \lr{Game} یک بازی \lr{Pacman} را مدیریت می‌کند. این کلاس دارای دو متد اصلی است:

play(): یک حرکت برای \lr{Agent} \lr{Pacman} انتخاب می‌کند و بازی را یک مرحله جلوتر می‌برد.
\lr{print_board}(): وضعیت بازی را چاپ می‌کند.